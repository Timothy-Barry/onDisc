[{"path":"https://katsevich-lab.github.io/sceptre/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 ondisc authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/articles/ondisc.html","id":"initializing-an-odm-object-via-create_odm_from_cellranger","dir":"Articles","previous_headings":"","what":"Initializing an odm object via create_odm_from_cellranger()","title":"Getting started with ondisc","text":"ondisc provides two functions initializing odm object: create_odm_from_cellranger() create_odm_from_r_matrix(). former considerably scalable memory-efficient latter; thus, recommend users employ create_odm_from_cellranger() possible. illustrate use create_odm_from_cellranger() example single-cell CRISPR screen dataset stored sceptredata package. example data contain two modalities, namely gene modality CRISPR gRNA modality. 526 genes, 95 gRNAs, 45,919 cells data. Users can read example data evaluating vignette(\"sceptredata\") ?highmoi_example_data console. create_odm_from_cellranger() takes several arguments: directories_to_load, directory_to_write, write_cellwise_covariates, chunk_size, compression_level, grna_target_data_frame. first two arguments required; rest set reasonable defaults. describe directories_to_load directory_to_write arguments . directories_to_load character vector specifying locations one directories outputted Cell Ranger count. , set directories_to_load (machine-specific) location example data disk. directories_to_load contains file paths two directories, correspond cells sequenced across two batches. data stored feature barcode format; directory contains files barcodes.tsv.gz, features.tsv.gz, matrix.mtx.gz. Next, directory_to_write file path directory write backing .odm file, file store expression data disk. .odm files contain information .mtx files stored efficient format CRISPR screen analysis, differential expression analysis, gene co-expression analysis. .odm files simply HDF5 files special structure. set directory_to_write temp_dir (.e., temporary directory) example. remaining arguments optional, users need specify ; see ?create_odm_from_cellranger() information. , call create_odm_from_cellranger() example data, saving output function variable out_list. out_list contains three entries: gene, grna, cellwise_covariates. gene grna odm objects corresponding gene gRNA modalities, respectively. Meanwhile, cellwise_covariates data frame contains cell-wise covariates. (cell-wise covariates later.) inspection temp_dir reveals files gene.odm grna.odm written directory.","code":"directories_to_load <- paste0(   system.file(\"extdata\", package = \"sceptredata\"),    \"/highmoi_example/gem_group_\", 1:2 ) directories_to_load # file paths to the example data on your computer ## [1] \"/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/sceptredata/extdata/highmoi_example/gem_group_1\" ## [2] \"/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/sceptredata/extdata/highmoi_example/gem_group_2\" list.files(directories_to_load[1]) ## [1] \"barcodes.tsv.gz\" \"features.tsv\"    \"matrix.mtx\" list.files(directories_to_load[2]) ## [1] \"barcodes.tsv.gz\" \"features.tsv.gz\" \"matrix.mtx.gz\" temp_dir <- tempdir()  out_list <- create_odm_from_cellranger(   directories_to_load = directories_to_load,   directory_to_write = temp_dir  ) list.files(temp_dir, pattern = \"*.odm\") ## [1] \"gene.odm\" \"grna.odm\""},{"path":"https://katsevich-lab.github.io/sceptre/articles/ondisc.html","id":"interacting-with-the-odm-object","dir":"Articles","previous_headings":"","what":"Interacting with the odm object","title":"Getting started with ondisc","text":"extract odm object corresponding gene modality follows. Evaluating odm object console prints information matrix, including number features cells contained within matrix, well file path (machine-specific) backing .odm file. odm objects support several key matrix operations, including ncol(), nrow(), rownames(), [,]. ncol() nrow() return number rows (.e., features) columns (.e., cells) contained within matrix, respectively. Next, rownames() returns feature IDs. Finally, bracket operator ([,]) loads specified row expression matrix memory. One can index rows integer index feature ID, follows. Indexing odm object column supported. Finally, odm objects take little space, data stored disk rather -memory. example, gene_odm takes 40 kilobytes memory.","code":"gene_odm <- out_list[[\"gene\"]] gene_odm ## An object of class odm with the following attributes: ##  • 526 features ##  • 45919 cells ##  • Backing file: /var/folders/7v/5sqjgh8j28lgf8qx3gbtq1h00000gp/T//RtmpiobX7h/gene.odm n_features <- nrow(gene_odm) n_features ## [1] 526 n_cells <- ncol(gene_odm) n_cells ## [1] 45919 feature_ids <- rownames(gene_odm) head(feature_ids) ## [1] \"ENSG00000069275\" \"ENSG00000117222\" \"ENSG00000117266\" \"ENSG00000117280\" ## [5] \"ENSG00000133059\" \"ENSG00000133065\" expression_vector <- gene_odm[2,] head(expression_vector) ## [1] 2 1 0 1 1 0 expression_vector <- gene_odm[\"ENSG00000117222\",] head(expression_vector) ## [1] 2 1 0 1 1 0 object.size(gene_odm) |> format(units = \"Kb\") ## [1] \"38.7 Kb\""},{"path":"https://katsevich-lab.github.io/sceptre/articles/ondisc.html","id":"supported-modalities","dir":"Articles","previous_headings":"","what":"Supported modalities","title":"Getting started with ondisc","text":"ondisc supports following Cell Ranger modalities: Gene Expression, CRISPR Guide Capture (.e., gRNA expression), Antibody Capture (.e., protein expression). (modality given feature listed within third column unzipped features.tsv file; see Cell Ranger documentation information.) table maps modality name used Cell Ranger used ondisc. provide example using create_odm_from_cellranger() import dataset containing three modalities: gene expression, gRNA expression, protein expression. use synthetic dataset purpose (reduce amount data stored within sceptredata package). end call function write_example_cellranger_dataset(), creates synthetic single-cell dataset, writing dataset disk Cell Ranger feature barcode format. (See ?write_example_cellranger_dataset() information function.) create synthetic single-cell dataset consisting 500 genes, 50 gRNAs, 20 proteins, 10,000 cells. Furthermore, specify cells sequenced across three batches. write synthetic dataset directory temp_dir. synthetic data contained directories batch_1, batch_2, batch_3 within temp_dir: directories contains files matrix.mtx.gz, features.tsv.gz, barcodes.tsv.gz. example, contents batch_1 follows. call create_odm_from_cellranger() import data, saving output function variable out_list. out_list contains cell-wise covariate data frame alongside odm objects corresponding gene, gRNA, protein modalities. Moreover, files gene.odm, grna.odm, protein.odm written disk. (previous gene.odm grna.odm files overwritten.)","code":"set.seed(4) example_data <- write_example_cellranger_dataset(   n_features = c(500, 50, 20),   n_cells = 10000,   n_batch = 3,   modalities = c(\"gene\", \"grna\", \"protein\"),   directory_to_write = temp_dir ,   p_set_col_zero = 0 ) directories_to_load <- list.files(   temp_dir,   pattern = \"batch_\",   full.names = TRUE ) directories_to_load ## [1] \"/var/folders/7v/5sqjgh8j28lgf8qx3gbtq1h00000gp/T//RtmpiobX7h/batch_1\" ## [2] \"/var/folders/7v/5sqjgh8j28lgf8qx3gbtq1h00000gp/T//RtmpiobX7h/batch_2\" ## [3] \"/var/folders/7v/5sqjgh8j28lgf8qx3gbtq1h00000gp/T//RtmpiobX7h/batch_3\" list.files(directories_to_load[1]) ## [1] \"barcodes.tsv.gz\" \"features.tsv.gz\" \"matrix.mtx.gz\" out_list <- create_odm_from_cellranger(   directories_to_load = directories_to_load,   directory_to_write = temp_dir ) names(out_list) ## [1] \"gene\"                \"grna\"                \"protein\"             ## [4] \"cellwise_covariates\" list.files(temp_dir, pattern = \"*.odm\") ## [1] \"gene.odm\"    \"grna.odm\"    \"protein.odm\""},{"path":"https://katsevich-lab.github.io/sceptre/articles/ondisc.html","id":"the-cell-wise-covariate-data-frame","dir":"Articles","previous_headings":"","what":"The cell-wise covariate data frame","title":"Getting started with ondisc","text":"part importing data, create_odm_from_cellranger() computes cell-wise covariates. print first rows cell-wise covariate data frame corresponding synthetic data . modality given covariate corresponds (“gene”, “grna”, “protein”) prepended name covariate. describe covariate . gene_n_umis: number gene UMIs sequenced given cell. gene_n_nonzero: number genes exhibit nonzero expression given cell. gene_p_mito: fraction gene transcripts map mitochondrial genes given cell. (Mitochondrial genes identified genes whose name starts \"MT-\" \"mt-\".) grna_n_umis: similar gene_n_umis gRNA modality. grna_n_nonzero: similar gene_n_nonzero gRNA modality. grna_feature_w_max_expression: ID gRNA exhibits maximum UMI count given cell. grna_frac_umis_max_feature: fraction UMIs maximally expressed gRNA given cell constitutes. protein_n_umis: similar gene_n_umis protein modality. protein_n_nonzero: similar gene_n_nonzero protein modality. batch: batch given cell sequenced. Cells loaded different directories assumed belong different batches. sceptre uses covariates grna_feature_w_max_expression grna_frac_umis_max_feature assign gRNAs cells.","code":"cellwise_covariates <- out_list[[\"cellwise_covariates\"]] head(cellwise_covariates) ##    gene_n_umis gene_n_nonzero gene_p_mito grna_n_umis grna_n_nonzero ##          <int>          <int>       <num>       <int>          <int> ## 1:        1030            196   0.4330097         131             22 ## 2:        1034            187   0.4197292         126             24 ## 3:        1142            203   0.4168126         126             20 ## 4:        1177            217   0.4188615         119             21 ## 5:        1083            207   0.4524469         118             24 ## 6:        1095            193   0.4000000          89             17 ##    grna_feature_w_max_expression grna_frac_umis_max_feature protein_n_umis ##                           <char>                      <num>          <int> ## 1:                       grna_33                 0.07633588             64 ## 2:                        grna_6                 0.07936508             46 ## 3:                       grna_31                 0.07936508             51 ## 4:                       grna_22                 0.08403361             44 ## 5:                       grna_20                 0.08474576             31 ## 6:                       grna_11                 0.11235955             56 ##    protein_n_nonzero   batch ##                <int>  <fctr> ## 1:                 9 batch_1 ## 2:                 9 batch_1 ## 3:                 8 batch_1 ## 4:                 8 batch_1 ## 5:                 7 batch_1 ## 6:                 9 batch_1"},{"path":"https://katsevich-lab.github.io/sceptre/articles/ondisc.html","id":"reading-an--odm-file-into-r","dir":"Articles","previous_headings":"","what":"Reading an .odm file into R","title":"Getting started with ondisc","text":"Users can read .odm file R calling function initialize_odm_from_backing_file(). , delete variables global namespace. , call initialize_odm_from_backing_file() file gene.odm stored within temp_dir, loads gene expression matrix created previous step. .odm files portable. Thus, user can create .odm file one computer, move .odm file another computer, open .odm file second computer. Note odm objects portable; thus, move odm object one computer another, user transfer underlying .odm file second computer open .odm file second computer via initialize_odm_from_backing_file().","code":"rm(list = ls()) # delete all variables temp_dir <- tempdir() gene_odm <- initialize_odm_from_backing_file(   paste0(temp_dir, \"/gene.odm\") ) gene_odm ## An object of class odm with the following attributes: ##  • 500 features ##  • 10000 cells ##  • Backing file: /var/folders/7v/5sqjgh8j28lgf8qx3gbtq1h00000gp/T//RtmpiobX7h/gene.odm"},{"path":"https://katsevich-lab.github.io/sceptre/articles/ondisc.html","id":"initializing-an-odm-object-via-create_odm_from_r_matrix","dir":"Articles","previous_headings":"","what":"Initializing an odm object via create_odm_from_r_matrix()","title":"Getting started with ondisc","text":"recommend users create odm object via create_odm_from_cellranger(), function highly scalable typically requires couple gigabytes memory. However, users also can convert R matrix odm object via function create_odm_from_r_matrix(). create_odm_from_r_matrix() takes two main arguments: mat file_to_write. mat standard R matrix (type \"matrix\") sparse R matrix (type \"dgCMatrix\", \"dgRMatrix\", \"dgTMatrix\"). mat contain row names giving ID feature. Next, file_to_write fully-qualified file path specifying location write backing .odm file. provide example calling create_odm_from_r_matrix() gene--cell expression matrix contained sceptredata package. gene_mat gene expression matrix containing 299 genes 20,729 cells. (Users can evaluate ?lowmoi_example_data see information matrix.) pass matrix create_odm_from_r_matrix(), setting file_to_write paste0(temp_dir, \"/gene.odm\"). gene_odm standard odm object. Moreover, file gene.odm written temp_dir. (previous gene.odm file overwritten.)","code":"data(lowmoi_example_data) gene_mat <- lowmoi_example_data$response_matrix file_to_write <- paste0(temp_dir, \"/gene.odm\") gene_odm <- create_odm_from_r_matrix(   mat = gene_mat,   file_to_write = file_to_write ) gene_odm ## An object of class odm with the following attributes: ##  • 299 features ##  • 20729 cells ##  • Backing file: /var/folders/7v/5sqjgh8j28lgf8qx3gbtq1h00000gp/T//RtmpiobX7h/gene.odm"},{"path":"https://katsevich-lab.github.io/sceptre/articles/ondisc.html","id":"notes-on-compression","dir":"Articles","previous_headings":"","what":"Notes on compression","title":"Getting started with ondisc","text":"create_odm_from_cellranger() create_odm_from_r_matrix() take optional arguments chunk_size compression_level (set reasonable defaults). chunk_size compression_level control extent backing .odm file compressed. chunk_size positive integer, compression_level integer range 0 9. Increasing value arguments increases level compression, thereby leading smaller file size backing .odm file (possibly longer read write times).","code":"library(sessioninfo); session_info() ## ─ Session info ─────────────────────────────────────────────────────────────── ##  setting  value ##  version  R version 4.3.3 (2024-02-29) ##  os       macOS Sonoma 14.3.1 ##  system   aarch64, darwin20 ##  ui       X11 ##  language en ##  collate  en_US.UTF-8 ##  ctype    en_US.UTF-8 ##  tz       America/New_York ##  date     2024-04-01 ##  pandoc   3.1.1 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown) ##  ## ─ Packages ─────────────────────────────────────────────────────────────────── ##  package     * version  date (UTC) lib source ##  BH            1.84.0-0 2024-01-10 [2] CRAN (R 4.3.1) ##  bit           4.0.5    2022-11-15 [2] CRAN (R 4.3.0) ##  bit64         4.0.5    2020-08-30 [2] CRAN (R 4.3.0) ##  bslib         0.7.0    2024-03-29 [2] CRAN (R 4.3.1) ##  cachem        1.0.8    2023-05-01 [2] CRAN (R 4.3.0) ##  cli           3.6.2    2023-12-11 [2] CRAN (R 4.3.1) ##  colorspace    2.1-0    2023-01-23 [2] CRAN (R 4.3.0) ##  crayon        1.5.2    2022-09-29 [2] CRAN (R 4.3.0) ##  data.table    1.15.4   2024-03-30 [2] CRAN (R 4.3.1) ##  desc          1.4.3    2023-12-10 [2] CRAN (R 4.3.1) ##  digest        0.6.35   2024-03-11 [2] CRAN (R 4.3.1) ##  evaluate      0.23     2023-11-01 [2] CRAN (R 4.3.1) ##  fansi         1.0.6    2023-12-08 [2] CRAN (R 4.3.1) ##  fastmap       1.1.1    2023-02-24 [2] CRAN (R 4.3.0) ##  fs            1.6.3    2023-07-20 [2] CRAN (R 4.3.0) ##  glue          1.7.0    2024-01-09 [2] CRAN (R 4.3.1) ##  hms           1.1.3    2023-03-21 [2] CRAN (R 4.3.0) ##  htmltools     0.5.8    2024-03-25 [2] CRAN (R 4.3.1) ##  jquerylib     0.1.4    2021-04-26 [2] CRAN (R 4.3.0) ##  jsonlite      1.8.8    2023-12-04 [2] CRAN (R 4.3.1) ##  knitr         1.45     2023-10-30 [2] CRAN (R 4.3.1) ##  lattice       0.22-5   2023-10-24 [2] CRAN (R 4.3.3) ##  lifecycle     1.0.4    2023-11-07 [2] CRAN (R 4.3.1) ##  magrittr      2.0.3    2022-03-30 [2] CRAN (R 4.3.0) ##  Matrix        1.6-5    2024-01-11 [2] CRAN (R 4.3.3) ##  memoise       2.0.1    2021-11-26 [2] CRAN (R 4.3.0) ##  ondisc      * 1.2.0    2024-04-01 [1] Bioconductor ##  pillar        1.9.0    2023-03-22 [2] CRAN (R 4.3.0) ##  pkgconfig     2.0.3    2019-09-22 [2] CRAN (R 4.3.0) ##  pkgdown       2.0.7    2022-12-14 [2] CRAN (R 4.3.0) ##  purrr         1.0.2    2023-08-10 [2] CRAN (R 4.3.0) ##  R.methodsS3   1.8.2    2022-06-13 [2] CRAN (R 4.3.0) ##  R.oo          1.26.0   2024-01-24 [2] CRAN (R 4.3.1) ##  R.utils       2.12.3   2023-11-18 [2] CRAN (R 4.3.1) ##  R6            2.5.1    2021-08-19 [2] CRAN (R 4.3.0) ##  ragg          1.2.7    2023-12-11 [2] CRAN (R 4.3.1) ##  Rcpp          1.0.12   2024-01-09 [2] CRAN (R 4.3.1) ##  readr         2.1.5    2024-01-10 [2] CRAN (R 4.3.1) ##  Rhdf5lib      1.25.2   2024-02-14 [2] Bioconductor ##  rlang         1.1.3    2024-01-10 [2] CRAN (R 4.3.1) ##  rmarkdown     2.26     2024-03-05 [2] CRAN (R 4.3.1) ##  rstudioapi    0.15.0   2023-07-07 [2] CRAN (R 4.3.0) ##  sass          0.4.9    2024-03-15 [2] CRAN (R 4.3.1) ##  sceptre       0.9.1    2024-03-31 [2] Bioconductor ##  sceptredata * 0.9.0    2024-03-29 [2] Bioconductor ##  sessioninfo * 1.2.2    2021-12-06 [2] CRAN (R 4.3.0) ##  systemfonts   1.0.5    2023-10-09 [2] CRAN (R 4.3.1) ##  textshaping   0.3.7    2023-10-09 [2] CRAN (R 4.3.1) ##  tibble        3.2.1    2023-03-20 [2] CRAN (R 4.3.0) ##  tidyselect    1.2.1    2024-03-11 [2] CRAN (R 4.3.1) ##  tzdb          0.4.0    2023-05-12 [2] CRAN (R 4.3.0) ##  utf8          1.2.4    2023-10-22 [2] CRAN (R 4.3.1) ##  vctrs         0.6.5    2023-12-01 [2] CRAN (R 4.3.1) ##  vroom         1.6.5    2023-12-05 [2] CRAN (R 4.3.1) ##  xfun          0.43     2024-03-25 [2] CRAN (R 4.3.1) ##  yaml          2.3.8    2023-12-11 [2] CRAN (R 4.3.1) ##  ##  [1] /private/var/folders/7v/5sqjgh8j28lgf8qx3gbtq1h00000gp/T/RtmpdxMnom/temp_libpathc48b16002173 ##  [2] /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library ##  ## ──────────────────────────────────────────────────────────────────────────────"},{"path":"https://katsevich-lab.github.io/sceptre/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Timothy Barry. Author, maintainer. Songcheng Dai. Contributor. Yixuan Qiu. Contributor. Eugene Katsevich. Author, thesis advisor.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Barry T, Katsevich E (2024). ondisc: Algorithms data structures large single-cell expression matrices. R package version 1.2.0, https://timothy-barry.github.io/sceptre-book/, https://timothy-barry.github.io/ondisc/.","code":"@Manual{,   title = {ondisc: Algorithms and data structures for large single-cell expression matrices},   author = {Timothy Barry and Eugene Katsevich},   year = {2024},   note = {R package version 1.2.0, https://timothy-barry.github.io/sceptre-book/},   url = {https://timothy-barry.github.io/ondisc/}, }"},{"path":"https://katsevich-lab.github.io/sceptre/index.html","id":"ondisc","dir":"","previous_headings":"","what":"ondisc","title":"Algorithms and data structures for large single-cell expression matrices","text":"Single-cell datasets growing size, posing challenges well opportunities genomics researchers. ondisc R package facilitates analysis large-scale single-cell data --core laptop distributed across tens hundreds processors cluster cloud. settings, ondisc requires gigabytes memory, even input data tens gigabytes size. ondisc mainly oriented toward single-cell CRISPR screen analysis, ondisc also can used single-cell differential expression single-cell co-expression analyses. ondisc powered several new, efficient algorithms manipulating querying large, sparse expression matrices. ondisc companion package sceptre, R package statistically rigorous user-friendly single-cell CRISPR screen analysis. Although ondisc sceptre work best conjunction, ondisc can used independently sceptre (conversely, sceptre can used independently ondisc). Users can submit issues ondisc Github page.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/create_odm_from_cellranger.html","id":null,"dir":"Reference","previous_headings":"","what":"Create odm object from Cell Ranger — create_odm_from_cellranger","title":"Create odm object from Cell Ranger — create_odm_from_cellranger","text":"create_odm_from_cellranger() initializes odm object, taking input output one calls Cell Ranger count. number odm objects returned corresponds number modalities input data. Additionally, cell-wise covariate data frame computed returned. create_odm_from_cellranger() supports Cell Ranger modalities \"Gene Expression\", \"CRISPR Guide Capture\", \"Antibody Capture\".","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/create_odm_from_cellranger.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create odm object from Cell Ranger — create_odm_from_cellranger","text":"","code":"create_odm_from_cellranger(   directories_to_load,   directory_to_write,   write_cellwise_covariates = TRUE,   chunk_size = 1000L,   compression_level = 3L,   grna_target_data_frame = NULL )"},{"path":"https://katsevich-lab.github.io/sceptre/reference/create_odm_from_cellranger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create odm object from Cell Ranger — create_odm_from_cellranger","text":"directories_to_load character vector specifying locations directories load. directory contain files \"matrix.mtx.gz\" \"features.tsv.gz\" (optionally \"barcodes.tsv.gz\", ignored). directory_to_write string indicating directory write backing .odm files. write_cellwise_covariates (optional; default TRUE) logical value indicating whether write cellwise covariate data frame disk (TRUE) addition returning create_odm_from_cellranger(). chunk_size (optional; default 1000L) positive integer specifying chunk size use store data backing HDF5 file. compression_level (optional; default 3L) integer inveral [0, 9] specifying compression level use store data backing HDF5 file. grna_target_data_frame (optional) data frame mapping gRNA ID target. Relevant CRISPR modality present within data. (See note.)","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/create_odm_from_cellranger.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create odm object from Cell Ranger — create_odm_from_cellranger","text":"list containing odm object(s) cellwise covariates.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/create_odm_from_cellranger.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create odm object from Cell Ranger — create_odm_from_cellranger","text":"grna_target_data_frame relevant CRISPR screen data (.e., data \"CRISPR Guide Capture\" modality present). single-cell CRISPR screens, gRNAs delivered cells via viral vector. recent single-cell CRISPR screens involve special design viral vector harbors multiple gRNAs. example, Replogle 2022 conducted screen viral vector contained two gRNAs, targeting site. screens, users may wish \"collapse\" gRNA count matrix summing UMI counts gRNAs contained vector. , users can pass argument grna_target_data_frame, data frame containing two columns: grna_id vector_id. grna_id coincide gRNA IDs contained within features.tsv file, vector_id string indicating vector given gRNA ID belongs. expression vectors gRNAs contained within vector summed. arguments chunk_size compression_level control extent backing .odm files compressed, higher values corresponding smaller file sizes (albeit possibly longer read write times).","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/create_odm_from_cellranger.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create odm object from Cell Ranger — create_odm_from_cellranger","text":"","code":"library(sceptredata) directories_to_load <- paste0(  system.file(\"extdata\", package = \"sceptredata\"),  \"/highmoi_example/gem_group_\", c(1, 2) ) directory_to_write <- tempdir() out_list <- create_odm_from_cellranger(   directories_to_load = directories_to_load,   directory_to_write = directory_to_write, ) #> Round 1/2 processing of the input files. #> \tProcessing file 1 of 2. #> \tProcessing file 2 of 2. #> Round 2/2 processing of the input files. #> \tProcessing file 1 of 2. Computing cellwise covariates. Writing to disk. #> \tProcessing file 2 of 2. Computing cellwise covariates. Writing to disk."},{"path":"https://katsevich-lab.github.io/sceptre/reference/create_odm_from_r_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Create odm object from R matrix — create_odm_from_r_matrix","title":"Create odm object from R matrix — create_odm_from_r_matrix","text":"create_odm_from_r_matrix() converts R matrix (stored standard dense format sparse format) odm object.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/create_odm_from_r_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create odm object from R matrix — create_odm_from_r_matrix","text":"","code":"create_odm_from_r_matrix(   mat,   file_to_write,   chunk_size = 1000L,   compression_level = 3L )"},{"path":"https://katsevich-lab.github.io/sceptre/reference/create_odm_from_r_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create odm object from R matrix — create_odm_from_r_matrix","text":"mat R matrix class \"matrix\", \"dgCMatrix\", \"dgRMatrix\", \"dgTMatrix\". file_to_write fully-qualified file path specifying location write backing .odm file. chunk_size (optional; default 1000L) positive integer specifying chunk size use store data backing HDF5 file. compression_level (optional; default 3L) integer inveral [0, 9] specifying compression level use store data backing HDF5 file.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/create_odm_from_r_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create odm object from R matrix — create_odm_from_r_matrix","text":"odm object","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/create_odm_from_r_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create odm object from R matrix — create_odm_from_r_matrix","text":"","code":"library(sceptredata) data(lowmoi_example_data) gene_matrix <- lowmoi_example_data$response_matrix #> Loading required package: Matrix file_to_write <- paste0(tempdir(), \"/gene.odm\") odm_object <- create_odm_from_r_matrix(   mat = gene_matrix,   file_to_write = file_to_write )"},{"path":"https://katsevich-lab.github.io/sceptre/reference/dim-odm-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the number of columns and rows of an odm object — dim,odm-method","title":"Return the number of columns and rows of an odm object — dim,odm-method","text":"ncol() nrow() return number rows (.e., features) columns (.e., cells), respectively, contained within odm object. dim() returns integer vector length two whose first second entries, respectively, indicate number rows columns odm object.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/dim-odm-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the number of columns and rows of an odm object — dim,odm-method","text":"","code":"# S4 method for odm dim(x)"},{"path":"https://katsevich-lab.github.io/sceptre/reference/dim-odm-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the number of columns and rows of an odm object — dim,odm-method","text":"x object class odm","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/dim-odm-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the number of columns and rows of an odm object — dim,odm-method","text":"dimension odm object","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/dim-odm-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return the number of columns and rows of an odm object — dim,odm-method","text":"","code":"library(sceptredata) directories_to_load <- paste0(  system.file(\"extdata\", package = \"sceptredata\"),  \"/highmoi_example/gem_group_\", c(1, 2) ) directory_to_write <- tempdir() out_list <- create_odm_from_cellranger(   directories_to_load = directories_to_load,   directory_to_write = directory_to_write, ) #> Round 1/2 processing of the input files. #> \tProcessing file 1 of 2. #> \tProcessing file 2 of 2. #> Round 2/2 processing of the input files. #> \tProcessing file 1 of 2. Computing cellwise covariates. Writing to disk. #> \tProcessing file 2 of 2. Computing cellwise covariates. Writing to disk. gene_odm <- out_list$gene # return the dimension, number of rows, and number of columns dim(gene_odm) #> [1]   526 45919 nrow(gene_odm) #> [1] 526 ncol(gene_odm) #> [1] 45919"},{"path":"https://katsevich-lab.github.io/sceptre/reference/dimnames-odm-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Rownames — dimnames,odm-method","title":"Rownames — dimnames,odm-method","text":"Rownames","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/dimnames-odm-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rownames — dimnames,odm-method","text":"","code":"# S4 method for odm dimnames(x)"},{"path":"https://katsevich-lab.github.io/sceptre/reference/dimnames-odm-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rownames — dimnames,odm-method","text":"x object class odm","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/dimnames-odm-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rownames — dimnames,odm-method","text":"dimnames odm","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/initialize_odm_from_backing_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize an odm object — initialize_odm_from_backing_file","title":"Initialize an odm object — initialize_odm_from_backing_file","text":"initialize_odm_from_backing_file() initializes odm object backing .odm file.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/initialize_odm_from_backing_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize an odm object — initialize_odm_from_backing_file","text":"","code":"initialize_odm_from_backing_file(odm_file)"},{"path":"https://katsevich-lab.github.io/sceptre/reference/initialize_odm_from_backing_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize an odm object — initialize_odm_from_backing_file","text":"odm_file file path backing .odm file.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/initialize_odm_from_backing_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize an odm object — initialize_odm_from_backing_file","text":"odm object","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/initialize_odm_from_backing_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize an odm object — initialize_odm_from_backing_file","text":"initialize_odm_from_backing_file() portable: user can create .odm file (via create_odm_from_cellranger() create_odm_from_r_matrix()) one computer, transfer .odm file another computer, load .odm file (via initialize_odm_from_backing_file()) second computer.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/initialize_odm_from_backing_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize an odm object — initialize_odm_from_backing_file","text":"","code":"library(sceptredata) directories_to_load <- paste0(  system.file(\"extdata\", package = \"sceptredata\"),  \"/highmoi_example/gem_group_\", c(1, 2) ) directory_to_write <- tempdir() out_list <- create_odm_from_cellranger(   directories_to_load = directories_to_load,   directory_to_write = directory_to_write, ) #> Round 1/2 processing of the input files. #> \tProcessing file 1 of 2. #> \tProcessing file 2 of 2. #> Round 2/2 processing of the input files. #> \tProcessing file 1 of 2. Computing cellwise covariates. Writing to disk. #> \tProcessing file 2 of 2. Computing cellwise covariates. Writing to disk. gene_odm <- out_list$gene gene_odm #> An object of class odm with the following attributes: #> \t• 526 features #> \t• 45919 cells #> \t• Backing file: /var/folders/7v/5sqjgh8j28lgf8qx3gbtq1h00000gp/T//Rtmp8pBZJd/gene.odm  # delete the gene_odm object rm(gene_odm)  # reinitialize the gene_odm object gene_odm <- initialize_odm_from_backing_file(   paste0(tempdir(), \"/gene.odm\") ) gene_odm #> An object of class odm with the following attributes: #> \t• 526 features #> \t• 45919 cells #> \t• Backing file: /var/folders/7v/5sqjgh8j28lgf8qx3gbtq1h00000gp/T//Rtmp8pBZJd/gene.odm"},{"path":"https://katsevich-lab.github.io/sceptre/reference/ondisc-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ondisc: Algorithms and data structures for large single-cell expression matrices — ondisc-package","title":"ondisc: Algorithms and data structures for large single-cell expression matrices — ondisc-package","text":"Single-cell datasets growing size, posing challenges well opportunities genomics researchers. `ondisc` R package facilitates analysis large-scale single-cell data --core laptop distributed across tens hundreds processors cluster cloud. settings, `ondisc` requires gigabytes memory, even input data tens gigabytes size. `ondisc` mainly oriented toward single-cell CRISPR screen analysis, ondisc also can used single-cell differential expression single-cell co-expression analyses. ondisc powered several new, efficient algorithms manipulating querying large, sparse expression matrices.","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/sceptre/reference/ondisc-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ondisc: Algorithms and data structures for large single-cell expression matrices — ondisc-package","text":"Maintainer: Timothy Barry tbarry@hsph.harvard.edu (ORCID) Authors: Eugene Katsevich ekatsevi@wharton.upenn.edu [thesis advisor] contributors: Songcheng Dai [contributor] Yixuan Qiu [contributor]","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/ondisc-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ondisc: Algorithms and data structures for large single-cell expression matrices — ondisc-package","text":"","code":"# initialize odm objects from Cell Ranger output; also, compute the cellwise covariates library(sceptredata) directories_to_load <- paste0(  system.file(\"extdata\", package = \"sceptredata\"),  \"/highmoi_example/gem_group_\", c(1, 2) ) directory_to_write <- tempdir() out_list <- create_odm_from_cellranger(   directories_to_load = directories_to_load,   directory_to_write = directory_to_write, ) #> Round 1/2 processing of the input files. #> \tProcessing file 1 of 2. #> \tProcessing file 2 of 2. #> Round 2/2 processing of the input files. #> \tProcessing file 1 of 2. Computing cellwise covariates. Writing to disk. #> \tProcessing file 2 of 2. Computing cellwise covariates. Writing to disk.  # extract the odm corresponding to the gene modality gene_odm <- out_list$gene gene_odm #> An object of class odm with the following attributes: #> \t• 526 features #> \t• 45919 cells #> \t• Backing file: /var/folders/7v/5sqjgh8j28lgf8qx3gbtq1h00000gp/T//Rtmp8pBZJd/gene.odm  # obtain dimension information dim(gene_odm) #> [1]   526 45919 nrow(gene_odm) #> [1] 526 ncol(gene_odm) #> [1] 45919  # obtain rownames (i.e., the feature IDs) rownames(gene_odm) |> head() #> [1] \"ENSG00000069275\" \"ENSG00000117222\" \"ENSG00000117266\" \"ENSG00000117280\" #> [5] \"ENSG00000133059\" \"ENSG00000133065\"  # extract row into memory, first by integer and then by string expression_vector_1 <- gene_odm[10,] expression_vector_2 <- gene_odm[\"ENSG00000135046\",]  # delete the gene_odm object rm(gene_odm)  # reinitialize the gene_odm object gene_odm <- initialize_odm_from_backing_file(   paste0(tempdir(), \"/gene.odm\") ) gene_odm #> An object of class odm with the following attributes: #> \t• 526 features #> \t• 45919 cells #> \t• Backing file: /var/folders/7v/5sqjgh8j28lgf8qx3gbtq1h00000gp/T//Rtmp8pBZJd/gene.odm"},{"path":"https://katsevich-lab.github.io/sceptre/reference/rownames-odm-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the rownames of an odm object — dimnames,odm-method","title":"Return the rownames of an odm object — dimnames,odm-method","text":"rownames() returns rownames (.e., feature IDs) odm object.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/rownames-odm-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the rownames of an odm object — dimnames,odm-method","text":"","code":"# S4 method for odm dimnames(x)"},{"path":"https://katsevich-lab.github.io/sceptre/reference/rownames-odm-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the rownames of an odm object — dimnames,odm-method","text":"x object class odm","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/rownames-odm-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the rownames of an odm object — dimnames,odm-method","text":"rownames odm object","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/rownames-odm-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return the rownames of an odm object — dimnames,odm-method","text":"","code":"library(sceptredata) directories_to_load <- paste0(  system.file(\"extdata\", package = \"sceptredata\"),  \"/highmoi_example/gem_group_\", c(1, 2) ) directory_to_write <- tempdir() out_list <- create_odm_from_cellranger(   directories_to_load = directories_to_load,   directory_to_write = directory_to_write, ) #> Round 1/2 processing of the input files. #> \tProcessing file 1 of 2. #> \tProcessing file 2 of 2. #> Round 2/2 processing of the input files. #> \tProcessing file 1 of 2. Computing cellwise covariates. Writing to disk. #> \tProcessing file 2 of 2. Computing cellwise covariates. Writing to disk. gene_odm <- out_list$gene # return the rownames rownames(gene_odm) |> head() #> [1] \"ENSG00000069275\" \"ENSG00000117222\" \"ENSG00000117266\" \"ENSG00000117280\" #> [5] \"ENSG00000133059\" \"ENSG00000133065\""},{"path":"https://katsevich-lab.github.io/sceptre/reference/sub-odm-ANY-missing-missing-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Load a row of an odm object into memory — [,odm,ANY,missing,missing-method","title":"Load a row of an odm object into memory — [,odm,ANY,missing,missing-method","text":"operator [ loads specified row odm object memory. odm object can indexed either integer feature ID.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/sub-odm-ANY-missing-missing-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load a row of an odm object into memory — [,odm,ANY,missing,missing-method","text":"","code":"# S4 method for odm,ANY,missing,missing [(x, i, j, drop)"},{"path":"https://katsevich-lab.github.io/sceptre/reference/sub-odm-ANY-missing-missing-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load a row of an odm object into memory — [,odm,ANY,missing,missing-method","text":"x object class odm index row load memory. can either integer (specifying integer-based index row load memory) string (specifying feature ID row load memory). j used drop used","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/sub-odm-ANY-missing-missing-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load a row of an odm object into memory — [,odm,ANY,missing,missing-method","text":"expression vector (class numeric)","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/sub-odm-ANY-missing-missing-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load a row of an odm object into memory — [,odm,ANY,missing,missing-method","text":"","code":"library(sceptredata) directories_to_load <- paste0(  system.file(\"extdata\", package = \"sceptredata\"),  \"/highmoi_example/gem_group_\", c(1, 2) ) directory_to_write <- tempdir() out_list <- create_odm_from_cellranger(   directories_to_load = directories_to_load,   directory_to_write = directory_to_write, ) #> Round 1/2 processing of the input files. #> \tProcessing file 1 of 2. #> \tProcessing file 2 of 2. #> Round 2/2 processing of the input files. #> \tProcessing file 1 of 2. Computing cellwise covariates. Writing to disk. #> \tProcessing file 2 of 2. Computing cellwise covariates. Writing to disk. gene_odm <- out_list$gene # extract rows into memory by index and ID v1 <- gene_odm[10L,] v2 <- gene_odm[\"ENSG00000173825\",]"},{"path":"https://katsevich-lab.github.io/sceptre/reference/write_example_cellranger_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Write example Cell Ranger dataset — write_example_cellranger_dataset","title":"Write example Cell Ranger dataset — write_example_cellranger_dataset","text":"write_example_cellranger_dataset() creates example dataset writes dataset disk Cell Ranger format. dataset can unimodal multimodal, containing subset gene expression, gRNA expression, protein expression modalities.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/write_example_cellranger_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write example Cell Ranger dataset — write_example_cellranger_dataset","text":"","code":"write_example_cellranger_dataset(   n_features,   n_cells,   n_batch,   modalities,   directory_to_write,   p_zero = NULL,   p_set_col_zero = NULL,   p_set_row_zero = NULL )"},{"path":"https://katsevich-lab.github.io/sceptre/reference/write_example_cellranger_dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write example Cell Ranger dataset — write_example_cellranger_dataset","text":"n_features integer vector specifying number features simulate modality. n_cells integer specifying number cells simulate. n_batch integer specifying number batches simulate. Cells different batches written different directories. modalities character vector indicating modalities simulate. vector contain subset strings \"gene\", \"grna\", \"protein\". directory_to_write directory write Cell Ranger feature barcode files. p_zero (optional; default random) fraction entries set randomly zero. p_set_col_zero (optional; default random) fraction columns set randomly zero. p_set_row_zero (optional; default random) fraction rows set randomly zero.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/write_example_cellranger_dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write example Cell Ranger dataset — write_example_cellranger_dataset","text":"list containing () list simulated expression matrices, (ii) character vector containing names genes (NULL gene modality simulated), (iii) character vector specifying batch cell.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/write_example_cellranger_dataset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write example Cell Ranger dataset — write_example_cellranger_dataset","text":"","code":"set.seed(4) n_features <- c(1000, 40, 400) modalities <- c(\"gene\", \"protein\", \"grna\") n_cells <- 10000 n_batch <- 2 directory_to_write <- tempdir() p_set_col_zero <- 0 out <- write_example_cellranger_dataset(   n_features = n_features,   n_cells = n_cells,   n_batch = n_batch,   modalities = modalities,   directory_to_write = directory_to_write,   p_set_col_zero = p_set_col_zero )  # directories written to directory_to_write fs <- list.files(directory_to_write, pattern = \"batch*\", full.names = TRUE) # files contained within the directories list.files(fs[1]) #> [1] \"barcodes.tsv.gz\" \"features.tsv.gz\" \"matrix.mtx.gz\"   list.files(fs[2]) #> [1] \"barcodes.tsv.gz\" \"features.tsv.gz\" \"matrix.mtx.gz\""},{"path":"https://katsevich-lab.github.io/sceptre/news/index.html","id":"version-120","dir":"Changelog","previous_headings":"","what":"Version 1.2.0","title":"Version 1.2.0","text":"Version 1.2.0 represents first stable release ondisc since completely rewrote package. ondisc v1.2.0 features two data import functions: create_odm_from_cellranger() create_odm_from_r_matrix(). Additionally, ondisc provides several functions interacting odm object, including dim(), rownames(), [,] operator.","code":""}]
