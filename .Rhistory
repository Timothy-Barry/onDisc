document()
?create_odm_from_cellranger
document()
?create_odm_from_cellranger
docuemnt()
document()
?create_odm_from_cellranger
document()
?create_odm_from_cellranger
document()
?create_odm_from_cellranger
document()
?create_odm_from_cellranger
document()
?create_odm_from_cellranger
document()
?create_odm_from_cellranger
documen t()
document()
?create_odm_from_cellranger
document()
load_all()
pkgdown::build_reference()
document()
document()
document()
?create_odm_from_r_matrix
document()
document()
?create_odm_from_cellranger
data("lowmoi_example_data")
document()
lowmoi_example_data$response_matrix
gene_matrix <- lowmoi_example_data$response_matrix
document()
?create_odm_from_r_matrix
rnorm(10,)
rnorm(10,,)
rnorm(10,,,,,,,)
rnorm(10,,,,,,)
rnorm(10,,,,,)
rnorm(10,,,,)
rnorm(10,,,)
rnorm(10,,)
rnorm(10,,)
load_all()
document()
?create_odm_from_r_matrix
document()
?create_odm_from_r_matrix
document()
?create_odm_from_r_matrix
document()
pkgdown::build_reference()
document()
pkgdown::build_reference()
document()
pkgdown::build_reference()
document()
document()
document()
pkgdown::build_reference()
pkgdown::build_reference()
document()
pkgdown::build_reference()
pnorm(130, 100, 15)
pnorm(130, 100, 15) * 100
document()
load_all()
document()
document()
document()
?write_example_cellranger_dataset
document()
document()
?sceptre
?write_example_cellranger_dataset
document()
?write_example_cellranger_dataset
document()
?write_example_cellranger_dataset
document()
n_features <- c(1000, 40, 400)
modalities <- c("gene", "protein", "grna")
n_cells <- 10000
n_batch <- 2
dir_to_write <- tempdir()
p_set_col_zero <- 0
out <- write_example_cellranger_dataset(
n_features = n_features,
n_cells = n_cells,
n_batch = n_batch,
modalities = modalities,
dir_to_write = dir_to_write,
p_set_col_zero = p_set_col_zero
)
document()
?write_example_cellranger_dataset
n_features <- c(1000, 40, 400)
modalities <- c("gene", "protein", "grna")
n_cells <- 10000
n_batch <- 2
directory_to_write <- tempdir()
p_set_col_zero <- 0
out <- write_example_cellranger_dataset(
n_features = n_features,
n_cells = n_cells,
n_batch = n_batch,
modalities = modalities,
directory_to_write = directory_to_write,
p_set_col_zero = p_set_col_zero
)
out$matrix_list
out$gene_names
out$batch
document()
?write_example_cellranger_dataset
document()
?write_example_cellranger_dataset
document()
?write_example_cellranger_dataset
pkgdown::build_reference()
document()
pkgdown::build_reference()
n_features <- c(1000, 40, 400)
modalities <- c("gene", "protein", "grna")
n_cells <- 10000
n_batch <- 2
directory_to_write <- tempdir()
p_set_col_zero <- 0
out <- write_example_cellranger_dataset(
n_features = n_features,
n_cells = n_cells,
n_batch = n_batch,
modalities = modalities,
directory_to_write = directory_to_write,
p_set_col_zero = p_set_col_zero
)
list.files(directory_to_write, pattern = "batch*")
document()
?write_example_cellranger_dataset
document()
?write_example_cellranger_dataset
n_features <- c(1000, 40, 400)
modalities <- c("gene", "protein", "grna")
n_cells <- 10000
n_batch <- 2
directory_to_write <- tempdir()
p_set_col_zero <- 0
out <- write_example_cellranger_dataset(
n_features = n_features,
n_cells = n_cells,
n_batch = n_batch,
modalities = modalities,
directory_to_write = directory_to_write,
p_set_col_zero = p_set_col_zero
)
# files written to directory_to_write
list.files(directory_to_write, pattern = "batch*", full.names = TRUE)
pkgdown::build_reference()
document()
pkgdown::build_reference()
document()
load_all()
pkgdown::build_reference()
document()
pkgdown::build_reference()
load_all()
document()
out$matrix_list$gene |> dim()
document()
?dim
pkgdown::build_reference()
document()
document()
pkgdown::build_reference()
document()
pkgdown::build_reference()
document()
?dimnames
pkgdown::build_reference()
document()
pkgdown::build_reference()
pkgdown::build_reference()
document()
document()
document()
load_all()
pkgdown::build_reference()
document()
load_all()
pkgdown::build_reference()
load_all()
document()
load_all()
document()
load_all()
document()
pkgdown::build_home()
pkgdown::build_home()
document()
document()
?create_odm_from_r_matrix
document()
?create_odm_from_r_matrix
document()
test()
load_all()
########################
# define test parameters
########################
n_trials <- 10L
matrix_classes <- c("RsparseMatrix", "CsparseMatrix", "TsparseMatrix", "matrix")
n_rows_range <- c(10L, 10000L)
n_cols_range <- c(10L, 10000L)
#################
# create the data
#################
test_data_list <- lapply(seq(1L, n_trials), FUN = function(i) {
print(paste0("Generating example dataset ", i, "."))
n_rows <- sample(x = seq(n_rows_range[1], n_rows_range[2]), size = 2L, replace = FALSE)
n_col <- sample(x = seq(n_cols_range[1], n_cols_range[2]), size = 1L)
gene_matrix <- create_random_matrix(n_row = n_rows[1],
n_col = n_col,
p_zero = runif(1),
p_set_col_zero = runif(1),
p_set_row_zero = runif(1),
matrix_class = "matrix") |> add_row_names("gene")
curr_matrix_class <- sample(matrix_classes, 1)
gene_matrix <- as(gene_matrix, curr_matrix_class)
return(gene_matrix)
})
i <- 1
print(paste0("Testing import from R matrix for dataset ", i))
mem_matrix <- test_data_list[[i]]
n_row <- nrow(mem_matrix)
n_nonzero <- if (methods::is(mem_matrix, "matrix")) {
sum(mem_matrix)
} else {
sum(mem_matrix@x)
}
odm <- create_odm_from_r_matrix(mat = mem_matrix,
file_to_write = paste0(tempdir(), "/gene_", i, ".odm"),
chunk_size = min(1000L, n_nonzero))
create_odm_from_r_matrix
n_nonzero
odm <- create_odm_from_r_matrix(mat = mem_matrix,
file_to_write = paste0(tempdir(), "/gene_", i, ".odm"),
chunk_size = min(1000L, n_nonzero))
load_all()
n_nonzero
load_all()
test_that("import data from R matrix", {
########################
# define test parameters
########################
n_trials <- 10L
matrix_classes <- c("RsparseMatrix", "CsparseMatrix", "TsparseMatrix", "matrix")
n_rows_range <- c(10L, 10000L)
n_cols_range <- c(10L, 10000L)
#################
# create the data
#################
test_data_list <- lapply(seq(1L, n_trials), FUN = function(i) {
print(paste0("Generating example dataset ", i, "."))
n_rows <- sample(x = seq(n_rows_range[1], n_rows_range[2]), size = 2L, replace = FALSE)
n_col <- sample(x = seq(n_cols_range[1], n_cols_range[2]), size = 1L)
gene_matrix <- create_random_matrix(n_row = n_rows[1],
n_col = n_col,
p_zero = runif(1),
p_set_col_zero = runif(1),
p_set_row_zero = runif(1),
matrix_class = "matrix") |> add_row_names("gene")
curr_matrix_class <- sample(matrix_classes, 1)
gene_matrix <- as(gene_matrix, curr_matrix_class)
return(gene_matrix)
})
###############
# run the tests
###############
for (i in seq(1L, n_trials)) {
print(paste0("Testing import from R matrix for dataset ", i))
mem_matrix <- test_data_list[[i]]
n_row <- nrow(mem_matrix)
n_nonzero <- if (methods::is(mem_matrix, "matrix")) {
sum(mem_matrix)
} else {
sum(mem_matrix@x)
}
odm <- create_odm_from_r_matrix(mat = mem_matrix,
file_to_write = paste0(tempdir(), "/gene_", i, ".odm"),
chunk_size = min(1000L, n_nonzero) - 5L)
# 1. check dimension
expect_equal(dim(mem_matrix), odm@dimension)
# 2. check feature ids
expect_equal(rownames(mem_matrix), rownames(odm))
# 3. check index into randomly selected rows by integer
sample_idxs <- c(1L, sample(x = seq(1L, n_row), size = min(30, n_row), replace = FALSE), n_row)
for (sample_idx in sample_idxs) {
expect_equal(odm[sample_idx,], as.integer(mem_matrix[sample_idx,]))
}
# 4. check index into randomly selected rows by feature
sample_features <- sample(x = rownames(mem_matrix), size = min(30, n_row), replace = FALSE)
for (sample_feature in sample_features) {
expect_equal(odm[sample_feature,], as.integer(mem_matrix[sample_feature,]))
}
}
})
test()
load_all()
n_trials <- 10L
matrix_classes <- c("RsparseMatrix", "CsparseMatrix", "TsparseMatrix", "matrix")
n_rows_range <- c(10L, 10000L)
n_cols_range <- c(10L, 10000L)
#################
# create the data
#################
test_data_list <- lapply(seq(1L, n_trials), FUN = function(i) {
print(paste0("Generating example dataset ", i, "."))
n_rows <- sample(x = seq(n_rows_range[1], n_rows_range[2]), size = 2L, replace = FALSE)
n_col <- sample(x = seq(n_cols_range[1], n_cols_range[2]), size = 1L)
gene_matrix <- create_random_matrix(n_row = n_rows[1],
n_col = n_col,
p_zero = runif(1),
p_set_col_zero = runif(1),
p_set_row_zero = runif(1),
matrix_class = "matrix") |> add_row_names("gene")
curr_matrix_class <- sample(matrix_classes, 1)
gene_matrix <- as(gene_matrix, curr_matrix_class)
return(gene_matrix)
})
###############
# run the tests
###############
for (i in seq(1L, n_trials)) {
print(paste0("Testing import from R matrix for dataset ", i))
mem_matrix <- test_data_list[[i]]
n_row <- nrow(mem_matrix)
n_nonzero <- if (methods::is(mem_matrix, "matrix")) {
sum(mem_matrix)
} else {
sum(mem_matrix@x)
}
odm <- create_odm_from_r_matrix(mat = mem_matrix,
file_to_write = paste0(tempdir(), "/gene_", i, ".odm"),
chunk_size = min(1000L, n_nonzero) - 5L)
# 1. check dimension
expect_equal(dim(mem_matrix), odm@dimension)
# 2. check feature ids
expect_equal(rownames(mem_matrix), rownames(odm))
# 3. check index into randomly selected rows by integer
sample_idxs <- c(1L, sample(x = seq(1L, n_row), size = min(30, n_row), replace = FALSE), n_row)
for (sample_idx in sample_idxs) {
expect_equal(odm[sample_idx,], as.integer(mem_matrix[sample_idx,]))
}
# 4. check index into randomly selected rows by feature
sample_features <- sample(x = rownames(mem_matrix), size = min(30, n_row), replace = FALSE)
for (sample_feature in sample_features) {
expect_equal(odm[sample_feature,], as.integer(mem_matrix[sample_feature,]))
}
}
i
print(paste0("Testing import from R matrix for dataset ", i))
mem_matrix <- test_data_list[[i]]
n_row <- nrow(mem_matrix)
n_nonzero <- if (methods::is(mem_matrix, "matrix")) {
sum(mem_matrix)
} else {
sum(mem_matrix@x)
}
odm <- create_odm_from_r_matrix(mat = mem_matrix,
file_to_write = paste0(tempdir(), "/gene_", i, ".odm"),
chunk_size = min(1000L, n_nonzero) - 5L)
mem_matrix
dim(mem_matrix)
class(mem_matrix)
sum(mem_matrix >= 1)
n_nonzero
print(paste0("Testing import from R matrix for dataset ", i))
mem_matrix <- test_data_list[[i]]
n_row <- nrow(mem_matrix)
n_nonzero <- if (methods::is(mem_matrix, "matrix")) {
sum(mem_matrix >= 1)
} else {
length(mem_matrix@x)
}
odm <- create_odm_from_r_matrix(mat = mem_matrix,
file_to_write = paste0(tempdir(), "/gene_", i, ".odm"),
chunk_size = min(1000L, n_nonzero) - 5L)
odm
print(paste0("Testing import from R matrix for dataset ", i))
mem_matrix <- test_data_list[[i]]
n_row <- nrow(mem_matrix)
n_nonzero <- if (methods::is(mem_matrix, "matrix")) {
sum(mem_matrix >= 1)
} else {
length(mem_matrix@x)
}
if (n_nonzero <= 10L) break
odm <- create_odm_from_r_matrix(mat = mem_matrix,
file_to_write = paste0(tempdir(), "/gene_", i, ".odm"),
chunk_size = min(1000L, n_nonzero) - 5L)
# 1. check dimension
expect_equal(dim(mem_matrix), odm@dimension)
# 2. check feature ids
expect_equal(rownames(mem_matrix), rownames(odm))
# 3. check index into randomly selected rows by integer
sample_idxs <- c(1L, sample(x = seq(1L, n_row), size = min(30, n_row), replace = FALSE), n_row)
for (sample_idx in sample_idxs) {
expect_equal(odm[sample_idx,], as.integer(mem_matrix[sample_idx,]))
}
# 4. check index into randomly selected rows by feature
sample_features <- sample(x = rownames(mem_matrix), size = min(30, n_row), replace = FALSE)
for (sample_feature in sample_features) {
expect_equal(odm[sample_feature,], as.integer(mem_matrix[sample_feature,]))
}
load_all()
test()
test()
load_all()
9
19
load_all()
install()
9
load_all()
load_all()
?sceptre
##########################
# High-MOI CRISPRi example
##########################
# 1. create the sceptre object from cellranger output
directories <- paste0(
system.file("extdata", package = "sceptredata"),
"/highmoi_example/gem_group_", c(1, 2)
)
data(grna_target_data_frame_highmoi)
sceptre_object <- import_data_from_cellranger(
directories = directories,
moi = "high", use_ondisc = TRUE,
grna_target_data_frame = grna_target_data_frame_highmoi
)
load_all()
?ondisc
load_all()
pkgdown::build_reference()
pkgdown::build_site()
pkgdown::build_home()
pkgdown::build_home()
install()
check()
document()
load_all()
check()
tempdir()
tempdir()
fs <- list.files(temp_dir, full.names = TRUE, pattern = "*.odm|*.rds")
fs <- list.files(tempdir(), full.names = TRUE, pattern = "*.odm|*.rds")
fs
check()
document()
document()
load_all()
document()
document()
load_all()
document()
load_all()
pkgdown::build_home()
pkgdown::build_reference()
document()
load_all()
pkgdown::build_reference_index()
pkgdown::build_reference()
check()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
install()
build_vignettes()
9
ls
install(build_vignettes = TRUE)
document()
document()
?write_example_cellranger_dataset
pkgdown::build_home()
pkgdown::build_site()
library(ondisc)
document()
load_all()
devtools::build_vignettes()
pkgdown::build_site()
document
document()
pkgdown::build_site()
load_all()
load_all()
?create_odm_from_r_matrix
library(sceptredata)
data(lowmoi_example_data)
gene_matrix <- lowmoi_example_data$response_matrix
file_to_write <- paste0(tempdir(), "/gene.odm")
odm_object <- create_odm_from_r_matrix(
mat = gene_matrix,
file_to_write = file_to_write
)
odm_object
gene_matrix <- lowmoi_example_data$response_matrix
gene_matrix |> class()
test()
install()
